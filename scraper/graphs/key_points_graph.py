"""
Graph module handling key points summarizer functionality.
"""

import logging
from typing import List, Optional

from scrapegraphai.graphs import BaseGraph

from scraper.errors import SummarizerError
from scraper.nodes.key_points_node import KeyPoints


class KeyPointsGraph:
    """
    Handles refinement sumary.
    """

    def __init__(self, documents: List[str], llm, content_source: str):
        """
        Initializes the KeyPointsGraph instance with a list of documents and model configurations.

        Args:
            documents: A list of documents as strings.
            llm: llm model.
        """
        self.documents = documents
        self.llm = llm
        self.content_source = content_source
        self._setup_graph()

    def _setup_graph(self):
        """
        Sets up the graph with the necessary nodes and configurations.
        """
        self.kp_node = KeyPoints(
            input="(parsed_doc | doc)",
            output=["summary"],
            node_config={
                "llm_model": self.llm,
                "verbose": True,
                "content_source": self.content_source,
            },
        )
        self.graph = BaseGraph(
            nodes=[self.kp_node],
            edges=[(self.kp_node)],
            entry_point=self.kp_node,
            use_burr=False,
            burr_config={
                "project_name": "universal-scraper",
                "app_instance_id": "001",
            },
        )

    def execute(self) -> Optional[str]:
        """
        Executes the graph to generate an answer for a given prompt.

        Args:
            prompt: The user's query or question as a string.

        Returns:
            The generated answer as a string, or None if no answer is found.
        """
        logging.info("Summarazing document")
        try:
            result, execution_info = self.graph.execute({"doc": self.documents})
            logging.info(f"Execution info: {execution_info}")

            # Extract answers from the result dictionary
            returnings: dict = result.get("summary", {})
            logging.info(f"Summary results: {returnings}")

            if returnings and len(returnings["answers"]) > 0:
                most_relevant_answer = max(
                    returnings.get("answers"),
                    key=lambda x: x.get("relevance", 0),
                    default=None,
                )
                relevance = most_relevant_answer.get("relevance", 0)
                source = returnings.get("source", "Unknown")
                logging.info(f"Most relevant answer: {most_relevant_answer['text']}")
                logging.info(f"Relevance: {relevance}")
                logging.info(f"Source: {source}")
                return f"{most_relevant_answer['text']}"
            else:
                logging.info("No answers generated by the model.")
                return None

        except SummarizerError as e:
            logging.error(f"Summarizing failed: {e}")
            return None
